openapi: 3.0.0
info:
  title: Flash Learn API
  description: API used by Flash learn system
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
    description: Example server URL
paths:
  /deck:
    get:
      summary: Fetches all decks in database
      operationId: getAllDecks
      responses:
        '200':
          description: List of all decks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      example: 1
                    name:
                      type: string
                      example: "Computer Science"
                    description:
                      type: string
                      example: "A deck for studying computer science"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new deck
      operationId: createDeck
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "New Study Deck"
                  maxLength: 64
                  minLength: 1
                description:
                  type: string
                  example: "A deck for studying new material"
                  maxLength: 255
      responses:
        '200':
          description: ID of the newly created deck
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 5
        '400':
          description: Invalid request body or empty name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Deck with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deck/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: The deck ID
        schema:
          type: integer
          format: int64
    get:
      summary: Fetches deck with id
      operationId: getDeckById
      responses:
        '200':
          description: Single deck details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  name:
                    type: string
                    example: "Study Deck"
                  description:
                    type: string
                    example: "A deck for studying"
                  creation_date:
                    type: string
                    format: date-time
                    example: "2023-04-01T10:30:00Z"
                  modification_date:
                    type: string
                    format: date-time
                    example: "2023-04-05T14:20:00Z"
                  last_study_date:
                    type: string
                    format: date-time
                    example: "2023-04-07T09:15:00Z"
        '400':
          description: Invalid ID or deck not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Edit deck details with id
      operationId: updateDeck
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Updated Study Deck"
                  maxLength: 64
                  minLength: 1
                description:
                  type: string
                  example: "An updated deck for studying"
                  maxLength: 255
      responses:
        '200':
          description: ID of the updated deck
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
        '400':
          description: Invalid request body, empty name, or invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Deck with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete deck with id
      operationId: deleteDeck
      responses:
        '200':
          description: ID of the deleted deck
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
        '400':
          description: Invalid ID or deck not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deck/nameMaxLength:
    get:
      summary: Get max allowed name length for a deck
      operationId: getNameMaxLength
      responses:
        '200':
          description: Maximum length for deck name
          content:
            application/json:
              schema:
                type: object
                properties:
                  maxLength:
                    type: integer
                    example: 64
  /deck/descriptionMaxLength:
    get:
      summary: Get max allowed description length for a deck
      operationId: getDescriptionMaxLength
      responses:
        '200':
          description: Maximum length for deck description
          content:
            application/json:
              schema:
                type: object
                properties:
                  maxLength:
                    type: integer
                    example: 255
  /deck/{id}/card:
    post:
      summary: Create a new card for deck with id
      operationId: insertCard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  example: "{'front': 'What is the capital of France?', 'back': 'Paris'}"
                source:
                  type: string
                  example: "https://example.com/card-source"
      responses:
        '200':
          description: ID of the newly created card
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
        '400':
          description: Invalid request body or empty content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          example: "An error occurred"
        code:
          type: integer
          example: 500